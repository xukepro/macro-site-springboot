<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuke.macrosite.dao.UserDao">

    <resultMap id="userDetailMap" type="UserDetail" autoMapping="true">
        <result property="avatar" column="url"/>
        <collection property="roles" ofType="String">
            <result column="name"/>
        </collection>
    </resultMap>

    <sql id="getUserInfoSql">
        SELECT u.id,
               u.username,
               u.nickname,
               u.email,
               avatar.url,
               ifnull(l.total_like, 0)        total_like,
               ifnull(a.total_articles, 0)    total_articles,
               ifnull(c.total_comment, 0)     total_comment,
               ifnull(co.total_collect, 0)    total_collect,
               ifnull(pv.total_page_views, 0) total_page_views,
               r.name,
               date_format(u.last_login_date, '%Y-%c-%d %h:%i:%s') last_login_date,
               date_format(u.created_at, '%Y-%c-%d %h:%i:%s') created_at,
               date_format(u.updated_at, '%Y-%c-%d %h:%i:%s') updated_at
        FROM `user` u
                 LEFT JOIN avatar on u.id = avatar.uid

                 LEFT JOIN (select count(*) total_articles, u.id id
                            FROM user u
                                     inner join article a on u.id = a.uid
                            GROUP BY u.id) a on a.id = u.id

                 LEFT JOIN (select count(*) total_like, u.id id
                            FROM user u
                                     inner join article a on u.id = a.uid
                                     inner join `like` l on a.id = l.aid
                            GROUP BY u.id) l on l.id = u.id

                 LEFT JOIN (select count(*) total_comment, u.id id
                            FROM user u
                                     inner join article a on u.id = a.uid
                                     inner join `comment` c on a.id = c.aid
                            GROUP BY u.id) c on c.id = u.id

                 LEFT JOIN (select count(*) total_collect, u.id id
                            FROM user u
                                     inner join article a on u.id = a.uid
                                     inner join collect c on a.id = c.aid
                            GROUP BY u.id) co on co.id = u.id

                 LEFT JOIN (select sum(page_views) total_page_views, u.id id
                            FROM user u
                                     inner join article a on u.id = a.uid
                            GROUP BY u.id) pv on pv.id = u.id

                 LEFT JOIN user_role ur on ur.uid = u.id
                 LEFT JOIN role r on r.id = ur.rid
    </sql>

    <select id="getUserInfo" resultMap="userDetailMap">
        <include refid="getUserInfoSql"/>
        where u.id = #{uid}
    </select>

    <select id="getAllUserInfo" resultMap="userDetailMap">
        <include refid="getUserInfoSql"/>
    </select>

    <resultMap id="userRolesMap" type="UserAdmin" autoMapping="true">
        <collection property="roles" ofType="Role" autoMapping="true"/>
    </resultMap>

    <select id="getAllRoles" resultMap="userRolesMap">
        select u.id, u.username, u.password, r.role
        from `user` u
                 left join user_role ur on u.id = ur.uid
                 left join role r on ur.rid = r.id
        where u.username = #{username}
    </select>

    <resultMap id="loginInfoMap" type="LoginInfo" autoMapping="true">
        <result property="lastLoginDate" column="last_login_date"/>
        <result property="avatarUrl" column="url"/>
        <collection property="roles" ofType="java.lang.String" javaType="java.util.List">
            <result column="role"/>
        </collection>
        <collection property="likeArticles" ofType="java.lang.Integer" javaType="java.util.List">
            <result column="like_articles_id"/>
        </collection>
        <collection property="collectArticles" ofType="java.lang.Integer">
            <result column="collect_articles_id"/>
        </collection>
    </resultMap>

    <select id="getLoginInfo" resultMap="loginInfoMap">
        select u.id,
               u.username,
               u.nickname,
               date_format(u.last_login_date, '%Y-%c-%d %h:%i:%s') last_login_date,
               a.url,
               r.role,
               a2.id like_articles_id,
               a3.id collect_articles_id
        from `user` u
                 left join avatar a on u.id = a.uid
                 left join user_role ur on u.id = ur.uid
                 left join role r on ur.rid = r.id
                 left join `like` l on u.id = l.uid
                 left join article a2 on l.aid = a2.id
                 left join collect c on u.id = c.uid
                 left join article a3 on c.aid = a3.id
        where u.username = #{username}
    </select>

    <select id="checkIsExisted" resultType="User">
        select *
        from `user`
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="username != null">
                username = #{username}
            </if>
            <if test="nickname != null">
                nickname = #{nickname}
            </if>
            <if test="email != null">
                email = #{email}
            </if>
        </where>
        limit 1
    </select>

    <insert id="addUserSelective" useGeneratedKeys="true" keyProperty="id">
        insert into user
            (username, password, nickname, email)
        values (#{username}, #{password}, #{nickname}, #{email})
    </insert>

    <update id="updateByPrimaryKeySelective">
        update user
        <set>
            <if test="password != null">
                `password` = #{password},
            </if>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="lastLoginDate != null">
                last_login_date = #{lastLoginDate},
            </if>
        </set>
        where id = #{id}
    </update>
</mapper>
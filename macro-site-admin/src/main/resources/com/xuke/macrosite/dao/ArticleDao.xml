<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuke.macrosite.dao.ArticleDao">

    <insert id="insert" parameterType="com.xuke.macrosite.entity.Article">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="cid != null">
                cid,
            </if>
            <if test="picture != null">
                picture,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="cid != null">
                #{cid,jdbcType=INTEGER},
            </if>
            <if test="picture != null">
                #{picture,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>

    <update id="update">
        update macro_site.article
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="picture != null">
                picture = #{picture,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="cid != null">
                cid = #{cid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id}
    </update>


    <delete id="deleteById">
        delete
        from macro_site.article
        where id = #{id}
    </delete>

    <resultMap id="articleDetailMap" type="com.xuke.macrosite.pojo.dto.ArticleDetail">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="author" column="author"/>
        <result property="description" column="description"/>
        <result property="content" column="content"/>
        <result property="category" column="category_name"/>
        <result property="pageViews" column="page_views"/>
        <result property="like" column="like"/>
        <result property="collect" column="collect"/>
        <result property="comment" column="comment"/>
        <result property="createAt" column="created_at"/>
        <result property="updateAt" column="updated_at"/>
        <collection property="tags" ofType="com.xuke.macrosite.entity.Tag">
            <result property="tagName" column="tag_name"/>
        </collection>
    </resultMap>

    <sql id="getArticleDetailsSql">
        SELECT a.id,
               u.nickname author,
               a.title,
               a.description,
               c.category_name,
               a.content,
               a.page_views,
               t.tag_name,
               IFNULL(l.`like`, 0)      `like`,
               IFNULL(col.collect, 0)   collect,
               IFNULL(com.`comment`, 0) `comment`,
               a.created_at,
               a.updated_at
        FROM article a
                 LEFT JOIN `user` u ON a.uid = u.id
                 LEFT JOIN category c ON a.cid = c.id
                 LEFT JOIN article_tag `at` ON a.id = `at`.aid
                 LEFT JOIN tag t ON `at`.tid = t.id
                 LEFT JOIN (SELECT count(*) AS `like`, title
                            FROM article a2,
                                 `like`
                            WHERE a2.id = `like`.aid
                            GROUP BY a2.id) l ON a.title = l.title
                 LEFT JOIN (SELECT count(*) AS collect, title
                            FROM article a3,
                                 collect
                            WHERE a3.id = collect.aid
                            GROUP BY a3.id) col ON a.title = col.title
                 LEFT JOIN (SELECT count(*) AS `comment`, title
                            FROM article a4,
                                 `comment`
                            WHERE a4.id = `comment`.aid
                            GROUP BY a4.id) com ON a.title = com.title
    </sql>

    <select id="getArticleContent" resultMap="articleDetailMap">
        <include refid="getArticleDetailsSql"/>
        where a.id = #{id}
    </select>

    <select id="getArticleList" resultMap="articleDetailMap">
        <include refid="getArticleDetailsSql"/>
        <where>
            <if test="uid != null">
                a.uid = #{uid}
            </if>
            <if test="key != null">
                and a.title like #{key}
                and a.description like #{key}
                and a.content like #{key}
            </if>
        </where>
        order by a.created_at desc
    </select>

    <resultMap id="collectArticle" type="CollectArticle">
        <result property="collectDate" column="create_at" />
    </resultMap>

    <select id="getMyCollectArticle" resultMap="collectArticle">
        select a.id,
               a.title,
               u.nickname author,
               c.create_at
        from collect c,
             article a,
             user u
        where c.aid = a.id
          and a.uid = u.id
          and c.uid = #{uid}
        order by c.create_at desc
    </select>

    <update id="addPageViews">
        update article a
        set page_views = page_views + 1
        where a.id = #{id}
    </update>

</mapper>